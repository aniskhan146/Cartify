-- =================================================================
-- AYEXPRESS E-COMMERCE: ADVANCED VARIANT SCHEMA
-- =================================================================
-- Instructions:
-- 1. Go to your Supabase project dashboard.
-- 2. Navigate to the "SQL Editor".
-- 3. Click "New query".
-- 4. Copy and paste the entire content of this file into the editor.
-- 5. Click "Run".
-- This script is idempotent and can be run multiple times safely.
-- =================================================================

-- 0. Helper function to get the current user's role
-- This is more reliable than JWT claims for RLS.
CREATE OR REPLACE FUNCTION get_user_role(user_id uuid)
RETURNS TEXT
LANGUAGE sql
SECURITY DEFINER
SET search_path = public
AS $$
  SELECT role FROM public.profiles WHERE id = user_id;
$$;


-- 1. Product Options Table (e.g., "Color", "Size", "Storage")
CREATE TABLE IF NOT EXISTS public.product_options (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name text NOT NULL UNIQUE,
    created_at timestamptz NOT NULL DEFAULT now()
);
ALTER TABLE public.product_options ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to product options" ON public.product_options;
CREATE POLICY "Allow public read access to product options" ON public.product_options FOR SELECT USING (true);
DROP POLICY IF EXISTS "Allow admin full access to product options" ON public.product_options;
CREATE POLICY "Allow admin full access to product options" ON public.product_options FOR ALL 
    USING (get_user_role(auth.uid()) = 'admin') 
    WITH CHECK (get_user_role(auth.uid()) = 'admin');


-- 2. Product Option Values Table (e.g., "Red", "Large", "256GB")
CREATE TABLE IF NOT EXISTS public.product_option_values (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    option_id bigint NOT NULL REFERENCES public.product_options(id) ON DELETE CASCADE,
    value text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE(option_id, value)
);
ALTER TABLE public.product_option_values ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to option values" ON public.product_option_values;
CREATE POLICY "Allow public read access to option values" ON public.product_option_values FOR SELECT USING (true);
DROP POLICY IF EXISTS "Allow admin full access to option values" ON public.product_option_values;
CREATE POLICY "Allow admin full access to option values" ON public.product_option_values FOR ALL 
    USING (get_user_role(auth.uid()) = 'admin') 
    WITH CHECK (get_user_role(auth.uid()) = 'admin');


-- 3. Variants Table Cleanup
-- The old `title` and `color_hex` are now managed through options.
ALTER TABLE public.variants DROP COLUMN IF EXISTS title;
ALTER TABLE public.variants DROP COLUMN IF EXISTS color_hex;


-- 4. Variant Options Join Table (Links a variant to its specific option values)
CREATE TABLE IF NOT EXISTS public.variant_options (
    variant_id bigint NOT NULL REFERENCES public.variants(id) ON DELETE CASCADE,
    option_value_id bigint NOT NULL REFERENCES public.product_option_values(id) ON DELETE CASCADE,
    PRIMARY KEY (variant_id, option_value_id)
);
ALTER TABLE public.variant_options ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to variant options" ON public.variant_options;
CREATE POLICY "Allow public read access to variant options" ON public.variant_options FOR SELECT USING (true);
DROP POLICY IF EXISTS "Allow admin full access to variant options" ON public.variant_options;
CREATE POLICY "Allow admin full access to variant options" ON public.variant_options FOR ALL 
    USING (get_user_role(auth.uid()) = 'admin') 
    WITH CHECK (get_user_role(auth.uid()) = 'admin');

-- Note: All other tables and policies from the previous schema update
-- (like brands, categories, products modifications, cart_items, functions, etc.)
-- are assumed to be in place. This script focuses on the specific changes
-- required for the advanced variant management system.
